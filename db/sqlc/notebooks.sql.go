// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: notebooks.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createNotebook = `-- name: CreateNotebook :one
INSERT INTO notebooks (
  id, title, topic, content, user_id, created_at
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, title, topic, content, deleted, last_modified, created_at, user_id
`

type CreateNotebookParams struct {
	ID        uuid.UUID `json:"id"`
	Title     string    `json:"title"`
	Topic     string    `json:"topic"`
	Content   string    `json:"content"`
	UserID    uuid.UUID `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateNotebook(ctx context.Context, arg CreateNotebookParams) (Notebook, error) {
	row := q.db.QueryRowContext(ctx, createNotebook,
		arg.ID,
		arg.Title,
		arg.Topic,
		arg.Content,
		arg.UserID,
		arg.CreatedAt,
	)
	var i Notebook
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Topic,
		&i.Content,
		&i.Deleted,
		&i.LastModified,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteNotebook = `-- name: DeleteNotebook :one
UPDATE notebooks 
SET deleted = true, last_modified = $3
WHERE id = $1 and user_id = $2
RETURNING id, title, topic, content, deleted, last_modified, created_at, user_id
`

type DeleteNotebookParams struct {
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"user_id"`
	LastModified time.Time `json:"last_modified"`
}

func (q *Queries) DeleteNotebook(ctx context.Context, arg DeleteNotebookParams) (Notebook, error) {
	row := q.db.QueryRowContext(ctx, deleteNotebook, arg.ID, arg.UserID, arg.LastModified)
	var i Notebook
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Topic,
		&i.Content,
		&i.Deleted,
		&i.LastModified,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const getNotebook = `-- name: GetNotebook :one
SELECT id, title, topic, content, deleted, last_modified, created_at, user_id FROM notebooks
WHERE id = $1 and user_id = $2 and deleted = false
LIMIT 1
`

type GetNotebookParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetNotebook(ctx context.Context, arg GetNotebookParams) (Notebook, error) {
	row := q.db.QueryRowContext(ctx, getNotebook, arg.ID, arg.UserID)
	var i Notebook
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Topic,
		&i.Content,
		&i.Deleted,
		&i.LastModified,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const getNotebookTitlesByTopic = `-- name: GetNotebookTitlesByTopic :many
SELECT id, title FROM notebooks
WHERE user_id = $1 and topic = $2 and deleted = false
`

type GetNotebookTitlesByTopicParams struct {
	UserID uuid.UUID `json:"user_id"`
	Topic  string    `json:"topic"`
}

type GetNotebookTitlesByTopicRow struct {
	ID    uuid.UUID `json:"id"`
	Title string    `json:"title"`
}

func (q *Queries) GetNotebookTitlesByTopic(ctx context.Context, arg GetNotebookTitlesByTopicParams) ([]GetNotebookTitlesByTopicRow, error) {
	rows, err := q.db.QueryContext(ctx, getNotebookTitlesByTopic, arg.UserID, arg.Topic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetNotebookTitlesByTopicRow{}
	for rows.Next() {
		var i GetNotebookTitlesByTopicRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotebooks = `-- name: ListNotebooks :many
SELECT id, title, topic, content, deleted, last_modified, created_at, user_id FROM notebooks
WHERE user_id = $1 and deleted = false
ORDER BY title
LIMIT $2
OFFSET $3
`

type ListNotebooksParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListNotebooks(ctx context.Context, arg ListNotebooksParams) ([]Notebook, error) {
	rows, err := q.db.QueryContext(ctx, listNotebooks, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notebook{}
	for rows.Next() {
		var i Notebook
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Topic,
			&i.Content,
			&i.Deleted,
			&i.LastModified,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopics = `-- name: ListTopics :many
SELECT DISTINCT(topic) from notebooks
WHERE user_id = $1
`

func (q *Queries) ListTopics(ctx context.Context, userID uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listTopics, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var topic string
		if err := rows.Scan(&topic); err != nil {
			return nil, err
		}
		items = append(items, topic)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchNotebooks = `-- name: SearchNotebooks :many
SELECT id, title, topic, content, deleted, last_modified, created_at, user_id from notebooks
WHERE user_id = $1 and deleted = false and (title ILIKE $2 or content ILIKE $2 or topic ILIKE $2)
`

type SearchNotebooksParams struct {
	UserID uuid.UUID `json:"user_id"`
	Title  string    `json:"title"`
}

func (q *Queries) SearchNotebooks(ctx context.Context, arg SearchNotebooksParams) ([]Notebook, error) {
	rows, err := q.db.QueryContext(ctx, searchNotebooks, arg.UserID, arg.Title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notebook{}
	for rows.Next() {
		var i Notebook
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Topic,
			&i.Content,
			&i.Deleted,
			&i.LastModified,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotebook = `-- name: UpdateNotebook :one
UPDATE notebooks 
SET title = $3, content = $4, topic = $5, last_modified = $6
WHERE id=$1 and user_id = $2 and deleted = false 
RETURNING id, title, topic, content, deleted, last_modified, created_at, user_id
`

type UpdateNotebookParams struct {
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"user_id"`
	Title        string    `json:"title"`
	Content      string    `json:"content"`
	Topic        string    `json:"topic"`
	LastModified time.Time `json:"last_modified"`
}

func (q *Queries) UpdateNotebook(ctx context.Context, arg UpdateNotebookParams) (Notebook, error) {
	row := q.db.QueryRowContext(ctx, updateNotebook,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Content,
		arg.Topic,
		arg.LastModified,
	)
	var i Notebook
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Topic,
		&i.Content,
		&i.Deleted,
		&i.LastModified,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}
