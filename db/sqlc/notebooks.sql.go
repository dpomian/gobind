// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: notebooks.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createNotebook = `-- name: CreateNotebook :one
INSERT INTO notebooks (
  id, title, topic, content, created_at
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, title, topic, content, deleted, last_modified, created_at
`

type CreateNotebookParams struct {
	ID        uuid.UUID `json:"id"`
	Title     string    `json:"title"`
	Topic     string    `json:"topic"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateNotebook(ctx context.Context, arg CreateNotebookParams) (Notebook, error) {
	row := q.db.QueryRowContext(ctx, createNotebook,
		arg.ID,
		arg.Title,
		arg.Topic,
		arg.Content,
		arg.CreatedAt,
	)
	var i Notebook
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Topic,
		&i.Content,
		&i.Deleted,
		&i.LastModified,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNotebook = `-- name: DeleteNotebook :exec
UPDATE notebooks 
SET deleted = true, last_modified = $2
WHERE id = $1
`

type DeleteNotebookParams struct {
	ID           uuid.UUID `json:"id"`
	LastModified time.Time `json:"last_modified"`
}

func (q *Queries) DeleteNotebook(ctx context.Context, arg DeleteNotebookParams) error {
	_, err := q.db.ExecContext(ctx, deleteNotebook, arg.ID, arg.LastModified)
	return err
}

const getNotebook = `-- name: GetNotebook :one
SELECT id, title, topic, content, deleted, last_modified, created_at FROM notebooks
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetNotebook(ctx context.Context, id uuid.UUID) (Notebook, error) {
	row := q.db.QueryRowContext(ctx, getNotebook, id)
	var i Notebook
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Topic,
		&i.Content,
		&i.Deleted,
		&i.LastModified,
		&i.CreatedAt,
	)
	return i, err
}

const listNotebooks = `-- name: ListNotebooks :many
SELECT id, title, topic, content, deleted, last_modified, created_at FROM notebooks
ORDER BY title
LIMIT $1
OFFSET $2
`

type ListNotebooksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListNotebooks(ctx context.Context, arg ListNotebooksParams) ([]Notebook, error) {
	rows, err := q.db.QueryContext(ctx, listNotebooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notebook
	for rows.Next() {
		var i Notebook
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Topic,
			&i.Content,
			&i.Deleted,
			&i.LastModified,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotebook = `-- name: UpdateNotebook :one
UPDATE notebooks 
SET title = $2, content = $3, topic = $4, last_modified = $5
WHERE id=$1
RETURNING id, title, topic, content, deleted, last_modified, created_at
`

type UpdateNotebookParams struct {
	ID           uuid.UUID `json:"id"`
	Title        string    `json:"title"`
	Content      string    `json:"content"`
	Topic        string    `json:"topic"`
	LastModified time.Time `json:"last_modified"`
}

func (q *Queries) UpdateNotebook(ctx context.Context, arg UpdateNotebookParams) (Notebook, error) {
	row := q.db.QueryRowContext(ctx, updateNotebook,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Topic,
		arg.LastModified,
	)
	var i Notebook
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Topic,
		&i.Content,
		&i.Deleted,
		&i.LastModified,
		&i.CreatedAt,
	)
	return i, err
}
